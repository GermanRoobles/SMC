#!/usr/bin/env python3
"""
Visualizaci√≥n Hist√≥rica SMC Bot - Versi√≥n Mejorada
=================================================

Este m√≥dulo proporciona funcionalidades avanzadas para visualizar el hist√≥rico
de se√±ales e indicadores SMC en el gr√°fico de TradingView con navegaci√≥n mejorada.
"""

import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import streamlit as st
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import numpy as np

from smc_historical import SMCHistoricalManager, HistoricalSnapshot, HistoricalPeriod
from smc_integration import add_bot_signals_to_chart, add_signals_statistics_to_chart
from smc_bot import SignalType

class HistoricalVisualizer:
    """
    Visualizador hist√≥rico para SMC Bot - Versi√≥n Mejorada
    """

    def __init__(self, manager: SMCHistoricalManager):
        self.manager = manager
        self.current_snapshot_index = 0
        self.playback_speed = 1.0
        self.is_playing = False
        self.auto_update_chart = True
        self.highlight_current_time = True
        self.show_time_zones = True

    def create_enhanced_historical_controls(self) -> Dict:
        """
        Crear controles de navegaci√≥n hist√≥rica mejorados

        Returns:
            Dict con informaci√≥n del estado actual
        """
        if not self.manager.snapshots:
            st.warning("‚ö†Ô∏è No hay snapshots hist√≥ricos disponibles")
            return {}

        # Contenedor principal para controles
        with st.container():
            st.markdown("### ‚è∞ Navegaci√≥n Hist√≥rica Mejorada")

            # Informaci√≥n del snapshot actual
            current_snapshot = self.get_current_snapshot()
            if current_snapshot:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìÖ Momento Actual",
                             current_snapshot.timestamp.strftime('%Y-%m-%d %H:%M:%S'))
                with col2:
                    st.metric("üìä Se√±ales", len(current_snapshot.signals))
                with col3:
                    st.metric("üéØ Posici√≥n", f"{self.current_snapshot_index + 1} / {len(self.manager.snapshots)}")

            # Controles de navegaci√≥n principal
            st.markdown("#### üéÆ Controles de Navegaci√≥n")

            # Fila 1: Navegaci√≥n b√°sica
            col1, col2, col3, col4, col5 = st.columns(5)

            with col1:
                if st.button("‚èÆÔ∏è Primero", help="Ir al primer snapshot"):
                    self.current_snapshot_index = 0
                    st.rerun()

            with col2:
                if st.button("‚è™ Anterior", help="Snapshot anterior"):
                    if self.current_snapshot_index > 0:
                        self.current_snapshot_index -= 1
                        st.rerun()

            with col3:
                if st.button("‚è∏Ô∏è Pausar" if self.is_playing else "‚ñ∂Ô∏è Reproducir",
                           help="Reproducir/pausar navegaci√≥n autom√°tica"):
                    self.is_playing = not self.is_playing
                    st.rerun()

            with col4:
                if st.button("‚è© Siguiente", help="Pr√≥ximo snapshot"):
                    if self.current_snapshot_index < len(self.manager.snapshots) - 1:
                        self.current_snapshot_index += 1
                        st.rerun()

            with col5:
                if st.button("‚è≠Ô∏è √öltimo", help="Ir al √∫ltimo snapshot"):
                    self.current_snapshot_index = len(self.manager.snapshots) - 1
                    st.rerun()

            # Fila 2: Navegaci√≥n por slider
            st.markdown("#### üéöÔ∏è Navegaci√≥n por Timeline")

            if len(self.manager.snapshots) > 1:
                # Crear etiquetas para el slider
                snapshot_labels = []
                for i, snapshot in enumerate(self.manager.snapshots):
                    timestamp_str = snapshot.timestamp.strftime('%m/%d %H:%M')
                    signals_count = len(snapshot.signals)
                    snapshot_labels.append(f"{timestamp_str} ({signals_count}üéØ)")

                # Slider principal
                new_index = st.slider(
                    "üìÖ Seleccionar momento hist√≥rico:",
                    min_value=0,
                    max_value=len(self.manager.snapshots) - 1,
                    value=self.current_snapshot_index,
                    step=1,
                    format="%d",
                    help="Desliza para navegar por el hist√≥rico"
                )

                # Actualizar si cambi√≥
                if new_index != self.current_snapshot_index:
                    self.current_snapshot_index = new_index
                    st.rerun()

                # Mostrar etiqueta del snapshot actual
                if 0 <= self.current_snapshot_index < len(snapshot_labels):
                    st.info(f"üìç **{snapshot_labels[self.current_snapshot_index]}**")

            # Fila 3: Controles avanzados
            st.markdown("#### ‚öôÔ∏è Configuraci√≥n Avanzada")

            col1, col2 = st.columns(2)

            with col1:
                # Velocidad de reproducci√≥n
                self.playback_speed = st.selectbox(
                    "üöÄ Velocidad de Reproducci√≥n:",
                    [0.5, 1.0, 1.5, 2.0, 3.0],
                    index=1,
                    help="Velocidad para reproducci√≥n autom√°tica"
                )

                # Opciones de visualizaci√≥n
                self.highlight_current_time = st.checkbox(
                    "üîÜ Resaltar Tiempo Actual",
                    value=self.highlight_current_time,
                    help="Marcar l√≠nea temporal actual"
                )

            with col2:
                # Saltos temporales
                jump_options = [
                    ("1 Hora", timedelta(hours=1)),
                    ("4 Horas", timedelta(hours=4)),
                    ("12 Horas", timedelta(hours=12)),
                    ("1 D√≠a", timedelta(days=1)),
                    ("3 D√≠as", timedelta(days=3)),
                    ("1 Semana", timedelta(weeks=1))
                ]

                selected_jump = st.selectbox(
                    "‚è∞ Salto Temporal:",
                    jump_options,
                    format_func=lambda x: x[0],
                    help="Saltar hacia adelante/atr√°s en el tiempo"
                )

                # Botones de salto
                col_back, col_forward = st.columns(2)

                with col_back:
                    if st.button("‚è™ Saltar Atr√°s", help=f"Retroceder {selected_jump[0]}"):
                        self._jump_time(-selected_jump[1])
                        st.rerun()

                with col_forward:
                    if st.button("‚è© Saltar Adelante", help=f"Avanzar {selected_jump[0]}"):
                        self._jump_time(selected_jump[1])
                        st.rerun()

            # Fila 4: Marcadores temporales
            st.markdown("#### üè∑Ô∏è Marcadores R√°pidos")

            if len(self.manager.snapshots) > 5:
                # Crear marcadores autom√°ticos
                markers = self._create_time_markers()

                marker_cols = st.columns(len(markers))

                for i, (marker_label, marker_index) in enumerate(markers.items()):
                    with marker_cols[i]:
                        if st.button(f"üìç {marker_label}",
                                   help=f"Saltar a {marker_label}"):
                            self.current_snapshot_index = marker_index
                            st.rerun()

            # Informaci√≥n adicional
            st.markdown("#### üìä Informaci√≥n del Per√≠odo")

            if self.manager.snapshots:
                start_time = self.manager.snapshots[0].timestamp
                end_time = self.manager.snapshots[-1].timestamp
                duration = end_time - start_time

                col1, col2, col3 = st.columns(3)

                with col1:
                    st.info(f"**üïê Inicio:** {start_time.strftime('%Y-%m-%d %H:%M:%S')}")

                with col2:
                    st.info(f"**üïò Fin:** {end_time.strftime('%Y-%m-%d %H:%M:%S')}")

                with col3:
                    st.info(f"**‚è±Ô∏è Duraci√≥n:** {str(duration).split('.')[0]}")

        return {
            'current_snapshot': current_snapshot,
            'position': self.current_snapshot_index,
            'total': len(self.manager.snapshots),
            'is_playing': self.is_playing,
            'speed': self.playback_speed
        }

    def _create_time_markers(self) -> Dict[str, int]:
        """
        Crear marcadores temporales autom√°ticos

        Returns:
            Dict con marcadores y sus √≠ndices
        """
        if not self.manager.snapshots:
            return {}

        markers = {}
        total_snapshots = len(self.manager.snapshots)

        # Marcadores por posici√≥n
        markers["Inicio"] = 0
        markers["25%"] = max(0, int(total_snapshots * 0.25))
        markers["50%"] = max(0, int(total_snapshots * 0.5))
        markers["75%"] = max(0, int(total_snapshots * 0.75))
        markers["Final"] = total_snapshots - 1

        # Marcadores por se√±ales (snapshots con m√°s se√±ales)
        signal_counts = [(i, len(snapshot.signals))
                        for i, snapshot in enumerate(self.manager.snapshots)]
        signal_counts.sort(key=lambda x: x[1], reverse=True)

        # A√±adir los 2 snapshots con m√°s se√±ales
        if len(signal_counts) >= 2:
            markers["üéØ Max Se√±ales"] = signal_counts[0][0]
            if signal_counts[1][1] > 0:
                markers["üéØ 2da Max"] = signal_counts[1][0]

        return markers

    def _jump_time(self, delta: timedelta):
        """
        Saltar en el tiempo por un delta espec√≠fico

        Args:
            delta: Delta de tiempo para saltar
        """
        if not self.manager.snapshots:
            return

        current_snapshot = self.get_current_snapshot()
        if not current_snapshot:
            return

        target_time = current_snapshot.timestamp + delta

        # Encontrar el snapshot m√°s cercano al tiempo objetivo
        closest_index = 0
        min_diff = float('inf')

        for i, snapshot in enumerate(self.manager.snapshots):
            diff = abs((snapshot.timestamp - target_time).total_seconds())
            if diff < min_diff:
                min_diff = diff
                closest_index = i

        self.current_snapshot_index = closest_index

    def add_enhanced_historical_signals_to_chart(self, fig: go.Figure, snapshot: HistoricalSnapshot,
                                               show_future_signals: bool = False,
                                               show_signal_evolution: bool = True):
        """
        A√±adir se√±ales hist√≥ricas mejoradas al gr√°fico

        Args:
            fig: Figura de plotly
            snapshot: Snapshot hist√≥rico
            show_future_signals: Si mostrar se√±ales futuras
            show_signal_evolution: Si mostrar evoluci√≥n de se√±ales
        """
        if not snapshot.signals:
            return

        # A√±adir se√±ales del snapshot actual
        add_bot_signals_to_chart(fig, snapshot.df, snapshot.bot_analysis)

        # A√±adir marcador temporal mejorado
        if self.highlight_current_time:
            self._add_enhanced_time_marker(fig, snapshot)

        # Mostrar evoluci√≥n de se√±ales
        if show_signal_evolution:
            self._add_signal_evolution_trace(fig, snapshot)

        # Mostrar se√±ales futuras si est√° habilitado
        if show_future_signals and len(self.manager.snapshots) > 1:
            self._add_future_signals_preview(fig, snapshot)

        # A√±adir informaci√≥n contextual
        self._add_historical_context_info(fig, snapshot)

    def _add_enhanced_time_marker(self, fig: go.Figure, snapshot: HistoricalSnapshot):
        """
        A√±adir marcador temporal mejorado

        Args:
            fig: Figura de plotly
            snapshot: Snapshot hist√≥rico
        """
        # L√≠nea vertical principal
        fig.add_vline(
            x=snapshot.timestamp,
            line_dash="solid",
            line_color="rgba(255, 215, 0, 0.9)",  # Dorado
            line_width=4,
            annotation_text="üìÖ MOMENTO HIST√ìRICO",
            annotation_position="top",
            annotation=dict(
                font=dict(size=14, color="gold", family="Arial Bold"),
                bgcolor="rgba(0, 0, 0, 0.8)",
                bordercolor="gold",
                borderwidth=2,
                borderpad=10,
                showarrow=True,
                arrowhead=2,
                arrowsize=1,
                arrowwidth=2,
                arrowcolor="gold"
            )
        )

        # Zona de tiempo actual (√°rea sombreada)
        if len(snapshot.df) > 0:
            time_range = timedelta(minutes=30)  # 30 minutos de zona
            start_time = snapshot.timestamp - time_range
            end_time = snapshot.timestamp + time_range

            fig.add_vrect(
                x0=start_time,
                x1=end_time,
                fillcolor="rgba(255, 215, 0, 0.1)",
                layer="below",
                line_width=0,
                annotation_text="üïê ZONA TEMPORAL",
                annotation_position="bottom left",
                annotation=dict(
                    font=dict(size=10, color="gold"),
                    bgcolor="rgba(0, 0, 0, 0.6)",
                    bordercolor="gold",
                    borderwidth=1
                )
            )

    def _add_signal_evolution_trace(self, fig: go.Figure, snapshot: HistoricalSnapshot):
        """
        A√±adir traza de evoluci√≥n de se√±ales

        Args:
            fig: Figura de plotly
            snapshot: Snapshot hist√≥rico
        """
        # Obtener snapshots previos para mostrar evoluci√≥n
        prev_snapshots = [s for s in self.manager.snapshots
                         if s.timestamp <= snapshot.timestamp]

        if len(prev_snapshots) <= 1:
            return

        # Crear trazas para evoluci√≥n de se√±ales
        buy_signals_x = []
        buy_signals_y = []
        sell_signals_x = []
        sell_signals_y = []

        for prev_snapshot in prev_snapshots[-10:]:  # √öltimos 10 snapshots
            for signal in prev_snapshot.signals:
                if hasattr(signal, 'timestamp') and hasattr(signal, 'price'):
                    if signal.signal_type == SignalType.BUY:
                        buy_signals_x.append(signal.timestamp)
                        buy_signals_y.append(signal.price)
                    elif signal.signal_type == SignalType.SELL:
                        sell_signals_x.append(signal.timestamp)
                        sell_signals_y.append(signal.price)

        # A√±adir traza de evoluci√≥n BUY
        if buy_signals_x:
            fig.add_trace(go.Scatter(
                x=buy_signals_x,
                y=buy_signals_y,
                mode='lines+markers',
                name='Evoluci√≥n BUY',
                line=dict(color='rgba(38, 166, 154, 0.6)', width=2, dash='dot'),
                marker=dict(color='rgba(38, 166, 154, 0.8)', size=6, symbol='circle'),
                showlegend=False,
                hovertemplate="Se√±al BUY Hist√≥rica<br>Precio: %{y}<br>Tiempo: %{x}<extra></extra>"
            ))

        # A√±adir traza de evoluci√≥n SELL
        if sell_signals_x:
            fig.add_trace(go.Scatter(
                x=sell_signals_x,
                y=sell_signals_y,
                mode='lines+markers',
                name='Evoluci√≥n SELL',
                line=dict(color='rgba(239, 83, 80, 0.6)', width=2, dash='dot'),
                marker=dict(color='rgba(239, 83, 80, 0.8)', size=6, symbol='circle'),
                showlegend=False,
                hovertemplate="Se√±al SELL Hist√≥rica<br>Precio: %{y}<br>Tiempo: %{x}<extra></extra>"
            ))

    def _add_historical_context_info(self, fig: go.Figure, snapshot: HistoricalSnapshot):
        """
        A√±adir informaci√≥n contextual hist√≥rica

        Args:
            fig: Figura de plotly
            snapshot: Snapshot hist√≥rico
        """
        # Informaci√≥n en la esquina superior izquierda
        context_text = f"""
        <b>üìÖ AN√ÅLISIS HIST√ìRICO</b><br>
        üïê Momento: {snapshot.timestamp.strftime('%Y-%m-%d %H:%M:%S')}<br>
        üéØ Se√±ales: {len(snapshot.signals)}<br>
        üìä Datos: {len(snapshot.df)} velas<br>
        üè¶ S√≠mbolo: {snapshot.symbol}<br>
        ‚è∞ Timeframe: {snapshot.timeframe}
        """

        fig.add_annotation(
            text=context_text,
            xref="paper", yref="paper",
            x=0.02, y=0.98,
            xanchor="left", yanchor="top",
            font=dict(size=11, color="white", family="Arial"),
            bgcolor="rgba(0, 0, 0, 0.8)",
            bordercolor="rgba(255, 255, 255, 0.3)",
            borderwidth=1,
            borderpad=10,
            showarrow=False
        )

        # Informaci√≥n de condiciones del mercado
        if snapshot.market_conditions:
            market_text = f"""
            <b>üè¶ CONDICIONES DEL MERCADO</b><br>
            üí∞ Precio: ${snapshot.market_conditions.get('price', 0):,.2f}<br>
            üìà Cambio: {snapshot.market_conditions.get('price_change', 0):+.2f}%<br>
            üìä Volatilidad: {snapshot.market_conditions.get('volatility', 0):.2f}%<br>
            üìè Rango: {snapshot.market_conditions.get('daily_range', 0):.2f}%
            """

            fig.add_annotation(
                text=market_text,
                xref="paper", yref="paper",
                x=0.02, y=0.78,
                xanchor="left", yanchor="top",
                font=dict(size=10, color="white", family="Arial"),
                bgcolor="rgba(0, 50, 100, 0.8)",
                bordercolor="rgba(100, 150, 255, 0.5)",
                borderwidth=1,
                borderpad=8,
                showarrow=False
            )

    def add_historical_signals_to_chart(self, fig: go.Figure, snapshot: HistoricalSnapshot,
                                      show_future_signals: bool = False):
        """
        A√±adir se√±ales hist√≥ricas al gr√°fico

        Args:
            fig: Figura de plotly
            snapshot: Snapshot hist√≥rico
            show_future_signals: Si mostrar se√±ales futuras (de otros snapshots)
        """
        if not snapshot.signals:
            return

        # A√±adir se√±ales del snapshot actual
        add_bot_signals_to_chart(fig, snapshot.df, snapshot.bot_analysis)

        # A√±adir marcador temporal
        fig.add_vline(
            x=snapshot.timestamp,
            line_dash="solid",
            line_color="rgba(255, 255, 255, 0.8)",
            line_width=3,
            annotation_text="üìÖ TIEMPO ACTUAL",
            annotation_position="top",
            annotation=dict(
                font=dict(size=12, color="white", family="Arial Bold"),
                bgcolor="rgba(255, 255, 255, 0.2)",
                bordercolor="white",
                borderwidth=2,
                borderpad=8
            )
        )

        # Mostrar se√±ales futuras si est√° habilitado
        if show_future_signals and len(self.manager.snapshots) > 1:
            self._add_future_signals_preview(fig, snapshot)

    def _add_future_signals_preview(self, fig: go.Figure, current_snapshot: HistoricalSnapshot):
        """
        A√±adir preview de se√±ales futuras

        Args:
            fig: Figura de plotly
            current_snapshot: Snapshot actual
        """
        current_time = current_snapshot.timestamp

        # Obtener snapshots futuros
        future_snapshots = [s for s in self.manager.snapshots if s.timestamp > current_time]

        for i, future_snapshot in enumerate(future_snapshots[:5]):  # M√°ximo 5 se√±ales futuras
            for signal in future_snapshot.signals:
                # Determinar timestamp de la se√±al
                if hasattr(signal.timestamp, 'strftime'):
                    signal_timestamp = signal.timestamp
                elif isinstance(signal.timestamp, (int, float)):
                    signal_idx = int(signal.timestamp)
                    if 0 <= signal_idx < len(future_snapshot.df):
                        signal_timestamp = future_snapshot.df.index[signal_idx]
                    else:
                        continue
                else:
                    continue

                # Colores para se√±ales futuras (m√°s transparentes)
                if signal.signal_type == SignalType.BUY:
                    color = 'rgba(38, 166, 154, 0.4)'
                    emoji = 'üîÆüöÄ'
                else:
                    color = 'rgba(239, 83, 80, 0.4)'
                    emoji = 'üîÆüéØ'

                # A√±adir marcador de se√±al futura
                fig.add_scatter(
                    x=[signal_timestamp],
                    y=[signal.entry_price],
                    mode='markers+text',
                    marker=dict(
                        size=15,
                        color=color,
                        symbol='diamond',
                        line=dict(width=2, color='white'),
                        opacity=0.6
                    ),
                    text=[emoji],
                    textposition="middle center",
                    textfont=dict(size=8, color="white"),
                    name=f"Future {signal.signal_type.value}",
                    showlegend=False,
                    hovertemplate=f"<b>üîÆ SE√ëAL FUTURA</b><br>" +
                                 f"Tipo: {signal.signal_type.value}<br>" +
                                 f"Entry: ${signal.entry_price:.2f}<br>" +
                                 f"R:R: {signal.risk_reward:.1f}:1<br>" +
                                 f"Tiempo: %{{x}}<br>" +
                                 f"<i>Se√±al generada en el futuro</i><extra></extra>"
                )

    def add_historical_timeline_to_chart(self, fig: go.Figure):
        """
        A√±adir timeline hist√≥rico al gr√°fico

        Args:
            fig: Figura de plotly
        """
        if not self.manager.snapshots:
            return

        # Crear l√≠nea de tiempo
        timestamps = [s.timestamp for s in self.manager.snapshots]
        signal_counts = [len(s.signals) for s in self.manager.snapshots]

        # A√±adir puntos de timeline
        for i, (timestamp, count) in enumerate(zip(timestamps, signal_counts)):
            color = '#4CAF50' if count > 0 else '#9E9E9E'
            size = max(8, min(20, count * 3))  # Tama√±o basado en n√∫mero de se√±ales

            fig.add_scatter(
                x=[timestamp],
                y=[fig.data[0].close.min() * 0.999],  # Parte inferior del gr√°fico
                mode='markers',
                marker=dict(
                    size=size,
                    color=color,
                    symbol='circle',
                    line=dict(width=1, color='white'),
                    opacity=0.8
                ),
                name=f"Timeline {i+1}",
                showlegend=False,
                hovertemplate=f"<b>üìÖ Punto Hist√≥rico #{i+1}</b><br>" +
                             f"Tiempo: %{{x}}<br>" +
                             f"Se√±ales: {count}<br>" +
                             f"<i>Click para navegar</i><extra></extra>"
            )

    def create_historical_evolution_chart(self) -> go.Figure:
        """
        Crear gr√°fico de evoluci√≥n hist√≥rica

        Returns:
            Figura con evoluci√≥n hist√≥rica
        """
        evolution = self.manager.get_signals_evolution()

        if not evolution or not evolution['timestamps']:
            return go.Figure()

        fig = go.Figure()

        # Gr√°fico de se√±ales totales
        fig.add_trace(go.Scatter(
            x=evolution['timestamps'],
            y=evolution['total_signals'],
            mode='lines+markers',
            name='Total Se√±ales',
            line=dict(color='#2196F3', width=3),
            marker=dict(size=8)
        ))

        # Gr√°fico de se√±ales BUY
        fig.add_trace(go.Scatter(
            x=evolution['timestamps'],
            y=evolution['buy_signals'],
            mode='lines+markers',
            name='Se√±ales BUY',
            line=dict(color='#26A69A', width=2),
            marker=dict(size=6)
        ))

        # Gr√°fico de se√±ales SELL
        fig.add_trace(go.Scatter(
            x=evolution['timestamps'],
            y=evolution['sell_signals'],
            mode='lines+markers',
            name='Se√±ales SELL',
            line=dict(color='#EF5350', width=2),
            marker=dict(size=6)
        ))

        # Configurar layout
        fig.update_layout(
            title='üìà Evoluci√≥n Hist√≥rica de Se√±ales SMC',
            xaxis_title='Tiempo',
            yaxis_title='N√∫mero de Se√±ales',
            paper_bgcolor='#1E1E1E',
            plot_bgcolor='#1E1E1E',
            font=dict(color='white'),
            hovermode='x unified',
            showlegend=True,
            height=400
        )

        return fig

    def create_rr_evolution_chart(self) -> go.Figure:
        """
        Crear gr√°fico de evoluci√≥n R:R

        Returns:
            Figura con evoluci√≥n R:R
        """
        evolution = self.manager.get_signals_evolution()

        if not evolution or not evolution['timestamps']:
            return go.Figure()

        fig = go.Figure()

        # Gr√°fico de R:R promedio
        fig.add_trace(go.Scatter(
            x=evolution['timestamps'],
            y=evolution['avg_rr'],
            mode='lines+markers',
            name='R:R Promedio',
            line=dict(color='#FF9800', width=3),
            marker=dict(size=8),
            fill='tonexty'
        ))

        # L√≠nea de referencia R:R = 2
        fig.add_hline(
            y=2.0,
            line_dash="dash",
            line_color="#4CAF50",
            annotation_text="R:R Target (2:1)",
            annotation_position="right"
        )

        # Configurar layout
        fig.update_layout(
            title='üìä Evoluci√≥n Risk:Reward Hist√≥rica',
            xaxis_title='Tiempo',
            yaxis_title='Risk:Reward Ratio',
            paper_bgcolor='#1E1E1E',
            plot_bgcolor='#1E1E1E',
            font=dict(color='white'),
            hovermode='x unified',
            showlegend=True,
            height=400
        )

        return fig

    def create_confidence_evolution_chart(self) -> go.Figure:
        """
        Crear gr√°fico de evoluci√≥n de confianza

        Returns:
            Figura con evoluci√≥n de confianza
        """
        evolution = self.manager.get_signals_evolution()

        if not evolution or not evolution['timestamps']:
            return go.Figure()

        fig = go.Figure()

        # Gr√°fico de confianza promedio
        confidence_pct = [c * 100 for c in evolution['avg_confidence']]

        fig.add_trace(go.Scatter(
            x=evolution['timestamps'],
            y=confidence_pct,
            mode='lines+markers',
            name='Confianza Promedio',
            line=dict(color='#9C27B0', width=3),
            marker=dict(size=8),
            fill='tozeroy'
        ))

        # L√≠neas de referencia
        fig.add_hline(y=80, line_dash="dash", line_color="#4CAF50",
                     annotation_text="Alta Confianza (80%)")
        fig.add_hline(y=60, line_dash="dash", line_color="#FF9800",
                     annotation_text="Confianza Media (60%)")

        # Configurar layout
        fig.update_layout(
            title='üéØ Evoluci√≥n de Confianza Hist√≥rica',
            xaxis_title='Tiempo',
            yaxis_title='Confianza (%)',
            paper_bgcolor='#1E1E1E',
            plot_bgcolor='#1E1E1E',
            font=dict(color='white'),
            hovermode='x unified',
            showlegend=True,
            height=400
        )

        return fig

    def create_market_conditions_chart(self) -> go.Figure:
        """
        Crear gr√°fico de condiciones del mercado

        Returns:
            Figura con condiciones del mercado
        """
        if not self.manager.snapshots:
            return go.Figure()

        timestamps = [s.timestamp for s in self.manager.snapshots]
        prices = [s.market_conditions.get('price', 0) for s in self.manager.snapshots]
        volatilities = [s.market_conditions.get('volatility', 0) for s in self.manager.snapshots]

        fig = go.Figure()

        # Gr√°fico de precio
        fig.add_trace(go.Scatter(
            x=timestamps,
            y=prices,
            mode='lines+markers',
            name='Precio',
            line=dict(color='#2196F3', width=3),
            marker=dict(size=6),
            yaxis='y'
        ))

        # Gr√°fico de volatilidad
        fig.add_trace(go.Scatter(
            x=timestamps,
            y=volatilities,
            mode='lines+markers',
            name='Volatilidad (%)',
            line=dict(color='#FF5722', width=2),
            marker=dict(size=4),
            yaxis='y2'
        ))

        # Configurar layout con dos ejes Y
        fig.update_layout(
            title='üè¶ Condiciones Hist√≥ricas del Mercado',
            xaxis_title='Tiempo',
            yaxis=dict(
                title='Precio',
                title_font=dict(color='#2196F3'),
                tickfont=dict(color='#2196F3'),
                side='left'
            ),
            yaxis2=dict(
                title='Volatilidad (%)',
                title_font=dict(color='#FF5722'),
                tickfont=dict(color='#FF5722'),
                anchor='x',
                overlaying='y',
                side='right'
            ),
            paper_bgcolor='#1E1E1E',
            plot_bgcolor='#1E1E1E',
            font=dict(color='white'),
            hovermode='x unified',
            showlegend=True,
            height=400
        )

        return fig

    def navigate_to_snapshot(self, index: int) -> Optional[HistoricalSnapshot]:
        """
        Navegar a un snapshot espec√≠fico

        Args:
            index: √çndice del snapshot

        Returns:
            Snapshot seleccionado
        """
        if 0 <= index < len(self.manager.snapshots):
            self.current_snapshot_index = index
            return self.manager.snapshots[index]
        return None

    def get_current_snapshot(self) -> Optional[HistoricalSnapshot]:
        """
        Obtener snapshot actual

        Returns:
            Snapshot actual
        """
        if self.manager.snapshots:
            return self.manager.snapshots[self.current_snapshot_index]
        return None

    def get_navigation_info(self) -> Dict:
        """
        Obtener informaci√≥n de navegaci√≥n

        Returns:
            Informaci√≥n de navegaci√≥n
        """
        if not self.manager.snapshots:
            return {}

        current = self.get_current_snapshot()

        return {
            'current_index': self.current_snapshot_index,
            'total_snapshots': len(self.manager.snapshots),
            'current_time': current.timestamp if current else None,
            'has_previous': self.current_snapshot_index > 0,
            'has_next': self.current_snapshot_index < len(self.manager.snapshots) - 1,
            'progress': (self.current_snapshot_index + 1) / len(self.manager.snapshots) * 100
        }

def create_historical_visualizer(manager: SMCHistoricalManager) -> HistoricalVisualizer:
    """
    Crear visualizador hist√≥rico

    Args:
        manager: Gestor hist√≥rico

    Returns:
        Visualizador hist√≥rico
    """
    return HistoricalVisualizer(manager)

def display_historical_controls(visualizer: HistoricalVisualizer) -> Dict:
    """
    Mostrar controles de navegaci√≥n hist√≥rica

    Args:
        visualizer: Visualizador hist√≥rico

    Returns:
        Estado de los controles
    """
    nav_info = visualizer.get_navigation_info()

    if not nav_info:
        st.warning("‚ö†Ô∏è No hay datos hist√≥ricos disponibles")
        return {}

    st.markdown("### üìÖ Navegaci√≥n Hist√≥rica")

    # Barra de progreso
    progress = nav_info['progress']
    st.progress(progress / 100)

    # Informaci√≥n actual
    current_time = nav_info['current_time']
    if current_time:
        st.info(f"üìÖ Tiempo actual: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")

    # Controles de navegaci√≥n
    col1, col2, col3, col4, col5 = st.columns([1, 1, 2, 1, 1])

    with col1:
        if st.button("‚èÆÔ∏è Inicio", disabled=not nav_info['has_previous']):
            visualizer.navigate_to_snapshot(0)
            st.rerun()

    with col2:
        if st.button("‚è™ Anterior", disabled=not nav_info['has_previous']):
            visualizer.navigate_to_snapshot(nav_info['current_index'] - 1)
            st.rerun()

    with col3:
        # Slider para navegaci√≥n directa
        new_index = st.slider(
            "Posici√≥n en el tiempo",
            min_value=0,
            max_value=nav_info['total_snapshots'] - 1,
            value=nav_info['current_index'],
            key="historical_slider"
        )

        if new_index != nav_info['current_index']:
            visualizer.navigate_to_snapshot(new_index)
            st.rerun()

    with col4:
        if st.button("‚è© Siguiente", disabled=not nav_info['has_next']):
            visualizer.navigate_to_snapshot(nav_info['current_index'] + 1)
            st.rerun()

    with col5:
        if st.button("‚è≠Ô∏è Final", disabled=not nav_info['has_next']):
            visualizer.navigate_to_snapshot(nav_info['total_snapshots'] - 1)
            st.rerun()

    # Informaci√≥n de estado
    st.markdown(f"**Snapshot {nav_info['current_index'] + 1} de {nav_info['total_snapshots']}**")

    return nav_info

# Ejemplo de uso
if __name__ == "__main__":
    print("üìÖ Historical Visualizer - Ejemplo de uso")
    print("=" * 45)

    from smc_historical import create_historical_manager

    # Crear gestor y visualizador
    manager = create_historical_manager("BTC/USDT", "15m")
    visualizer = create_historical_visualizer(manager)

    # Generar datos hist√≥ricos
    timeline = manager.generate_historical_timeline(HistoricalPeriod.HOURS_12, 6)

    print(f"üìä Timeline generado con {len(timeline)} puntos")
    print("   Funciones disponibles:")
    print("   - add_historical_signals_to_chart()")
    print("   - create_historical_evolution_chart()")
    print("   - create_rr_evolution_chart()")
    print("   - create_confidence_evolution_chart()")
    print("   - create_market_conditions_chart()")
    print("   - navigate_to_snapshot()")
    print("   - display_historical_controls()")
