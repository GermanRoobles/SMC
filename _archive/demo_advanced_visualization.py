#!/usr/bin/env python3
"""
Ejemplo de uso de las mejoras de visualizaci√≥n SMC Bot
=====================================================

Este script muestra c√≥mo usar las nuevas funciones de visualizaci√≥n
mejoradas para el SMC Bot con estilo TradingView.
"""

import pandas as pd
import plotly.graph_objects as go
import numpy as np
from datetime import datetime, timedelta

# Importar m√≥dulos del bot SMC
from smc_integration import get_smc_bot_analysis, add_bot_signals_to_chart, add_signals_statistics_to_chart
from smc_visualization_advanced import enhance_signal_visualization
from fetch_data import get_ohlcv

def demo_advanced_visualization():
    """
    Demostraci√≥n de la visualizaci√≥n avanzada del SMC Bot
    """
    print("üéØ Demostraci√≥n de Visualizaci√≥n Avanzada SMC Bot")
    print("=" * 50)

    # 1. Obtener datos de ejemplo
    print("üìä Obteniendo datos de mercado...")
    try:
        df = get_ohlcv("BTC/USDT", "15m")
        print(f"   ‚úÖ Datos obtenidos: {len(df)} velas")
    except Exception as e:
        print(f"   ‚ùå Error obteniendo datos: {e}")
        return

    # 2. Ejecutar an√°lisis del bot
    print("\nü§ñ Ejecutando an√°lisis SMC Bot...")
    try:
        bot_analysis = get_smc_bot_analysis(df)
        signals = bot_analysis['signals']
        print(f"   ‚úÖ An√°lisis completado: {len(signals)} se√±ales detectadas")
    except Exception as e:
        print(f"   ‚ùå Error en an√°lisis: {e}")
        return

    # 3. Crear gr√°fico base
    print("\nüìà Creando gr√°fico base...")
    fig = go.Figure(data=[
        go.Candlestick(
            x=df["timestamp"],
            open=df["open"],
            high=df["high"],
            low=df["low"],
            close=df["close"],
            name="Precio",
            increasing=dict(line=dict(color='#26A69A', width=1), fillcolor='#26A69A'),
            decreasing=dict(line=dict(color='#EF5350', width=1), fillcolor='#EF5350'),
        )
    ])

    # 4. A√±adir se√±ales b√°sicas
    print("\nüéØ A√±adiendo se√±ales b√°sicas...")
    add_bot_signals_to_chart(fig, df, bot_analysis)
    add_signals_statistics_to_chart(fig, bot_analysis)

    # 5. Aplicar mejoras avanzadas
    print("\n‚ú® Aplicando mejoras avanzadas...")
    enhance_signal_visualization(fig, df, bot_analysis)

    # 6. Configurar layout con estilo TradingView
    print("\nüé® Configurando estilo TradingView...")
    fig.update_layout(
        paper_bgcolor='#1E1E1E',
        plot_bgcolor='#1E1E1E',
        title={
            'text': "SMC Bot - Visualizaci√≥n Avanzada Demo",
            'font': {'size': 18, 'color': '#FFFFFF', 'family': 'Arial'},
            'x': 0.5,
            'xanchor': 'center'
        },
        xaxis=dict(
            showgrid=True,
            gridcolor='#2A2A2A',
            gridwidth=1,
            color='#FFFFFF',
            showspikes=True,
            spikecolor='#FFFFFF',
            spikesnap='cursor',
            spikemode='across',
        ),
        yaxis=dict(
            showgrid=True,
            gridcolor='#2A2A2A',
            gridwidth=1,
            color='#FFFFFF',
            showspikes=True,
            spikecolor='#FFFFFF',
            spikesnap='cursor',
            spikemode='across',
        ),
        legend=dict(
            bgcolor='rgba(30, 30, 30, 0.8)',
            bordercolor='rgba(255, 255, 255, 0.3)',
            font=dict(color='#FFFFFF'),
            borderwidth=1
        ),
        hovermode='x unified',
        showlegend=True,
        height=800,
        width=1200
    )

    # 7. Mostrar resultados
    print("\nüìä Resultados del an√°lisis:")
    print(f"   ‚Ä¢ Se√±ales detectadas: {len(signals)}")

    if signals:
        buy_signals = len([s for s in signals if s.signal_type.value == 'BUY'])
        sell_signals = len([s for s in signals if s.signal_type.value == 'SELL'])
        avg_rr = sum(s.risk_reward for s in signals) / len(signals)
        avg_confidence = sum(s.confidence for s in signals) / len(signals)

        print(f"   ‚Ä¢ Se√±ales BUY: {buy_signals}")
        print(f"   ‚Ä¢ Se√±ales SELL: {sell_signals}")
        print(f"   ‚Ä¢ R:R promedio: {avg_rr:.2f}:1")
        print(f"   ‚Ä¢ Confianza promedio: {avg_confidence:.1%}")

        # Mostrar detalles de las se√±ales
        print("\nüìã Detalle de se√±ales:")
        for i, signal in enumerate(signals):
            timestamp_str = "N/A"
            if hasattr(signal.timestamp, 'strftime'):
                timestamp_str = signal.timestamp.strftime('%Y-%m-%d %H:%M')
            elif isinstance(signal.timestamp, (int, float)):
                timestamp_str = f"√çndice: {signal.timestamp}"

            print(f"   {i+1}. {signal.signal_type.value} - Entry: ${signal.entry_price:.2f} - "
                  f"R:R: {signal.risk_reward:.1f}:1 - Conf: {signal.confidence:.0%} - {timestamp_str}")

    # 8. Guardar gr√°fico
    print("\nüíæ Guardando gr√°fico...")
    try:
        fig.write_html("demo_smc_advanced_visualization.html")
        print("   ‚úÖ Gr√°fico guardado como 'demo_smc_advanced_visualization.html'")
    except Exception as e:
        print(f"   ‚ùå Error guardando gr√°fico: {e}")

    print("\nüéâ Demostraci√≥n completada!")
    print("   Abra el archivo HTML en su navegador para ver el resultado")

def compare_basic_vs_advanced():
    """
    Comparar visualizaci√≥n b√°sica vs avanzada
    """
    print("\nüîç Comparaci√≥n: B√°sica vs Avanzada")
    print("=" * 40)

    # Caracter√≠sticas b√°sicas
    print("\nüìä Visualizaci√≥n B√°sica:")
    print("   ‚Ä¢ Se√±ales con flechas simples")
    print("   ‚Ä¢ L√≠neas de SL/TP b√°sicas")
    print("   ‚Ä¢ Estad√≠sticas simples")
    print("   ‚Ä¢ Informaci√≥n de hover b√°sica")

    # Caracter√≠sticas avanzadas
    print("\n‚ú® Visualizaci√≥n Avanzada:")
    print("   ‚Ä¢ Se√±ales con emojis y colores mejorados")
    print("   ‚Ä¢ Zonas de riesgo y ganancia destacadas")
    print("   ‚Ä¢ Etiquetas de calidad (R:R, Confianza)")
    print("   ‚Ä¢ Tracker de rendimiento en tiempo real")
    print("   ‚Ä¢ Indicador de sentimiento del mercado")
    print("   ‚Ä¢ Barras de fuerza de se√±al")
    print("   ‚Ä¢ Overlay de gesti√≥n de riesgo")
    print("   ‚Ä¢ L√≠neas de conexi√≥n entre se√±ales")
    print("   ‚Ä¢ Timestamps y estado del bot")

def show_customization_options():
    """
    Mostrar opciones de personalizaci√≥n
    """
    print("\nüé® Opciones de Personalizaci√≥n:")
    print("=" * 35)

    print("üéØ Configuraci√≥n de Se√±ales:")
    print("   - Colores personalizados")
    print("   - Tama√±os de marcadores")
    print("   - Estilos de l√≠neas")
    print("   - Transparencias")

    print("\nüìä Elementos Visuales:")
    print("   - Zonas de riesgo/ganancia")
    print("   - Etiquetas informativas")
    print("   - Indicadores de rendimiento")
    print("   - Sentimiento del mercado")

    print("\n‚öôÔ∏è Controles de Usuario:")
    print("   - Activar/desactivar elementos")
    print("   - Cambiar timeframes")
    print("   - Configurar alertas")
    print("   - Exportar datos")

if __name__ == "__main__":
    print("üöÄ SMC Bot - Demostraci√≥n de Visualizaci√≥n Avanzada")
    print("=" * 55)

    # Ejecutar demostraci√≥n
    demo_advanced_visualization()

    # Mostrar comparaci√≥n
    compare_basic_vs_advanced()

    # Mostrar opciones de personalizaci√≥n
    show_customization_options()

    print("\n" + "=" * 55)
    print("üéØ Para usar en Streamlit:")
    print("   1. Ejecutar: streamlit run app_streamlit.py")
    print("   2. Activar 'SMC Bot' en la barra lateral")
    print("   3. Activar 'Visualizaci√≥n Avanzada'")
    print("   4. Experimentar con las opciones avanzadas")
    print("=" * 55)
