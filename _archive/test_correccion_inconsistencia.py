#!/usr/bin/env python3
"""
TEST DE VERIFICACI√ìN: Correcci√≥n de Inconsistencia BOS/CHoCH
==========================================================

Verificar que la inconsistencia cr√≠tica entre sidebar y bot section ha sido corregida.
"""

from fetch_data import get_ohlcv
from smc_analysis import analyze
from smc_integration import get_smc_bot_analysis
from app_streamlit import consolidate_smc_metrics

def test_bos_choch_consistency():
    """Verificar que todas las funciones reportan el mismo valor para BOS/CHoCH"""

    print("="*70)
    print("üîç TEST DE CORRECCI√ìN: Inconsistencia BOS/CHoCH")
    print("="*70)

    try:
        # 1. Obtener datos de prueba (mismo escenario que el dashboard)
        print("\nüìä Obteniendo datos BTC/USDT 15m (480 velas)...")
        df = get_ohlcv('BTCUSDT', '15m', limit=480)
        print(f"   ‚úÖ Datos obtenidos: {len(df)} velas")

        # 2. Realizar an√°lisis SMC
        print("\nüîç Realizando an√°lisis SMC...")
        signals = analyze(df)
        bot_analysis = get_smc_bot_analysis(df)

        # 3. Calcular m√©tricas con diferentes m√©todos
        print("\nüìä COMPARANDO M√âTODOS DE CONTEO:")

        # M√©todo 1: Consolidado (usado en dashboard principal)
        consolidated_metrics = consolidate_smc_metrics(signals, bot_analysis)
        method1_count = consolidated_metrics['bos_choch_count']
        print(f"   üìà M√©todo Consolidado (dashboard): {method1_count}")

        # M√©todo 2: Directo sobre signals
        if 'bos_choch' in signals and signals['bos_choch'] is not None:
            bos_direct = int(signals['bos_choch']['BOS'].notna().sum())
            choch_direct = int(signals['bos_choch']['CHOCH'].notna().sum()) if 'CHOCH' in signals['bos_choch'].columns else 0
            method2_count = bos_direct + choch_direct
            print(f"   üîç M√©todo Directo (signals): {method2_count} (BOS={bos_direct}, CHoCH={choch_direct})")
        else:
            method2_count = 0
            print(f"   üîç M√©todo Directo (signals): {method2_count}")

        # M√©todo 3: Directo sobre bot_analysis
        if 'bos_choch' in bot_analysis and bot_analysis['bos_choch'] is not None:
            bos_bot = int(bot_analysis['bos_choch']['BOS'].notna().sum())
            choch_bot = int(bot_analysis['bos_choch']['CHOCH'].notna().sum()) if 'CHOCH' in bot_analysis['bos_choch'].columns else 0
            method3_count = bos_bot + choch_bot
            print(f"   ü§ñ M√©todo Bot Analysis: {method3_count} (BOS={bos_bot}, CHoCH={choch_bot})")
        else:
            method3_count = 0
            print(f"   ü§ñ M√©todo Bot Analysis: {method3_count}")

        # 4. Verificar consistencia
        print(f"\nüéØ RESULTADOS DE CONSISTENCIA:")
        all_methods = [method1_count, method2_count, method3_count]
        unique_values = set(all_methods)

        if len(unique_values) == 1:
            print(f"   ‚úÖ CORRECTO: Todos los m√©todos reportan {list(unique_values)[0]}")
            consistency_status = "PERFECTO"
        else:
            print(f"   ‚ùå INCONSISTENCIA: Valores diferentes detectados")
            print(f"      Consolidado: {method1_count}")
            print(f"      Directo Signals: {method2_count}")
            print(f"      Bot Analysis: {method3_count}")
            consistency_status = "FALLA"

        # 5. Simular lo que ve el usuario en diferentes secciones
        print(f"\nüë§ VISTA DEL USUARIO:")
        print(f"   üìä Dashboard Principal (Sidebar): {method1_count}")
        print(f"   ü§ñ Bot Section: {method1_count}")  # Ahora ambos usan consolidado
        print(f"   üìà An√°lisis T√©cnico: {method1_count}")

        # 6. Verificar que display_bot_metrics ahora usa consolidado
        print(f"\nüîß VERIFICACI√ìN DE CORRECCI√ìN:")

        # Simular el flujo que usa display_bot_metrics
        test_consolidated = consolidate_smc_metrics(bot_analysis, bot_analysis)
        sidebar_value = test_consolidated['bos_choch_count']

        if sidebar_value == method1_count:
            print(f"   ‚úÖ display_bot_metrics usa m√©tricas consolidadas correctamente")
            correction_status = "IMPLEMENTADA"
        else:
            print(f"   ‚ùå display_bot_metrics a√∫n usa l√≥gica diferente")
            correction_status = "FALLA"

        # 7. Resumen final
        print(f"\n" + "="*70)
        print(f"üìã RESUMEN DE LA VERIFICACI√ìN")
        print(f"="*70)
        print(f"‚úÖ Datos analizados: {len(df)} velas BTC/USDT 15m")
        print(f"üìä Valor BOS/CHoCH detectado: {method1_count}")
        print(f"üéØ Consistencia entre m√©todos: {consistency_status}")
        print(f"üîß Estado de la correcci√≥n: {correction_status}")

        if consistency_status == "PERFECTO" and correction_status == "IMPLEMENTADA":
            print(f"\nüéâ ¬°CORRECCI√ìN EXITOSA!")
            print(f"   La inconsistencia cr√≠tica ha sido resuelta")
            print(f"   Todas las secciones del dashboard mostrar√°n valores consistentes")
            return True
        else:
            print(f"\n‚ö†Ô∏è  CORRECCI√ìN INCOMPLETA")
            print(f"   Se requiere revisi√≥n adicional del c√≥digo")
            return False

    except Exception as e:
        print(f"\n‚ùå ERROR EN LA VERIFICACI√ìN: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_bos_choch_consistency()

    if success:
        print(f"\n‚úÖ TEST COMPLETADO: Inconsistencia corregida exitosamente")
    else:
        print(f"\n‚ùå TEST FALLIDO: Se requiere correcci√≥n adicional")
